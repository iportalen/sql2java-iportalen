# $Id: sql2java.properties,v 1.1 2006-01-26 13:10:19 fbr Exp $
# PROPERTIES FILE FOR SQL2JAVA 

#----------------------------------------------
# (1/5) CONFIGURE YOUR DATABASE ACCESS
#----------------------------------------------
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/miniclub
jdbc.username=root
jdbc.password=pepsimax
jdbc.schema=miniclub

#-------------------------------------------------
# (2/5) CONFIGURE RETRIEVAL OF AUTO GENERATED KEY
#-------------------------------------------------
# For those who do not want to read below, please simply pick up the
# configuration associated with your database.
#
# More explanation:
# When you save a bean whose primary key is numeric and has no value set,
# we assume that you want sql2java to retrieve a key's value generated 
# on the database side.
#
# generatedkey.retrieve can take 4 values:
#
# auto - the standard approach when you have a JDBC 3.0 driver.
#
# before - the key's value is retrieved before inserting the record.
#
# after - the key's value is retrieved after inserting the record
#
# none - the key's value is never retrieved, frankly I doubt you 
#        want this configuration
#
# If you set it to before or after you also need to configure the
# autogeneratedkey.statement properties. 
# <TABLE> is replaced at code generation time by the table name. 
# You may adjust this properties to fit your own naming convention.
#
# PICK THE CONFIGURATION ASSOCIATED WITH YOUR DATABASE
# (or create one, but in that case let us know so we can add it here... :-)
#
#-- ORACLE 8i ------
#generatedkey.retrieve=before
#generatedkey.statement=SELECT SEQ_<TABLE>.nextval FROM DUAL
#
#-- MYSQL (jdbc 3.0 driver), ORACLE 9, etc. ------
generatedkey.retrieve=auto
generatedkey.statement=
#
# MYSQL (without jdbc 3.0 driver) ------
#generatedkey.retrieve=after
#generatedkey.statement=SELECT last_insert_id()
#
#-- SQL SERVER, SYBASE ------
#generatedkey.retrieve=after
#generatedkey.statement=SELECT @@IDENTITY
# 
#-- POSTGRESQL ------
#generatedkey.retrieve=before
#generatedkey.statement=SELECT nextval('<TABLE>_SEQ')
#
#-- HSQL ------
#generatedkey.retrieve=after
#generatedkey.statement=CALL IDENTITY()
#


#----------------------------------------------
# (3/5) GENERATED SOURCE CODE
#----------------------------------------------
# Package name for the generated source code
mgrwriter.package=net.codeweasels.miniclub.database
# Destination of the generated source code (package hierarchy is preserved)
mgrwriter.destdir =geil

# sets a prefix to prepend to all generated classes
# useful if you are worried about namespace collision with reserved words
# or java.lang classes
#mgrwriter.classprefix=MyPrefix

#-----------------------------------------------
# (4/5) JDBC TYPES Mapping
#-----------------------------------------------
# 
# jdbc DATE mapping can be:
#  java.sql.Date
#  java.util.Date
jdbc2java.date=java.util.Date

# jdbc TIME mapping can be:
#  java.sql.Time
#  java.util.Date
jdbc2java.time=java.util.Date

# jdbc TIMESTAMP mappning can be:
#  java.sql.Timestamp
#  java.util.Date
jdbc2java.timestamp=java.util.Date

#-----------------------------------------------
# (5/5) FILTER OUT CERTAIN TABLES
#-----------------------------------------------
#
# COMMA SEPARATED list of table types to be mapped
# Commonly seen types are TABLE, VIEW, SYSTEM TABLE, SYNONYM
jdbc.tabletypes=TABLE

# Table name pattern of tables to be mapped to classes.
# available wildcard: %
# defaults to %
jdbc.tablenamepattern=%

# SPACE SEPARATED list of tables to include or exclude.  If you specify both,
# the include list will take priority. If these fields are left commented out,
# all tables in the specified schema will get mapped to classes
#mgrwriter.include=Testing
mgrwriter.exclude=URI SESSION

# SPACE SEPARATED list of tables that needs to have caching enabled by default.  
#mgrwriter.caching=TABLE1 TABLE2
mgrwriter.caching=CHILD PARENT DEPARTMENT USER ACTIVITY CHILD_ACTIVITY
